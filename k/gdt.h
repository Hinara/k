#ifndef GDT_H_
#define GDT_H_

#include <k/types.h>

#define GDT_ENTRY(base, limit, flags)			\
	((((base)  & 0xff000000ULL) << (56-24)) |	\
	 (((flags) & 0x0000f0ffULL) << 40) |	\
	 (((limit) & 0x000f0000ULL) << (48-16)) |	\
	 (((base)  & 0x00ffffffULL) << 16) |	\
	 (((limit) & 0x0000ffffULL)))

//				0b1100000010011010 LINUX KERNEL CODE
//				0b1100000010010010 LINUX KERNEL DATA
//				0b1100000011111010 LINUX USER CODE
//				0b1100000011110010 LINUX USER DATA

#define GDT_GRANILARITY_BIT	0b0000000000000000
#define GDT_GRANILARITY_PAGE	0b1000000000000000

#define GDT_SIZE_16		0b0000000000000000
#define GDT_SIZE_32		0b0100000000000000

#define GDT_PRESENT		0b0000000010000000

#define GDT_RING0		0b0000000000000000
#define GDT_RING1		0b0000000000100000
#define GDT_RING2		0b0000000001000000
#define GDT_RING3		0b0000000001100000

#define GDT_TYPE_CODE		0b0000000000010000
#define GDT_TYPE_DATA		0b0000000000010000
#define GDT_TYPE_SYSTEM		0b0000000000000000

#define GDT_EXECUTABLE		0b0000000000001000

#define GDT_CODE_READABLE	0b0000000000000010
#define GDT_DATA_WRITABLE	0b0000000000000010

#define GDT_DIR_UP		0b0000000000000000
#define GDT_DIR_DOWN		0b0000000000000100

#define GDT_ACCESSED		0b0000000000000001


#define GDT_DEFAULT_KERNEL_CODE	GDT_GRANILARITY_PAGE | GDT_SIZE_32 | \
				GDT_PRESENT | GDT_RING0 | GDT_TYPE_CODE | \
				GDT_EXECUTABLE | GDT_CODE_READABLE
#define GDT_DEFAULT_KERNEL_DATA	GDT_GRANILARITY_PAGE | GDT_SIZE_32 | \
				GDT_PRESENT | GDT_RING0 | GDT_TYPE_DATA | \
				GDT_DATA_WRITABLE
#define GDT_DEFAULT_USER_CODE	GDT_GRANILARITY_PAGE | GDT_SIZE_32 | \
				GDT_PRESENT | GDT_RING3 | GDT_TYPE_CODE | \
				GDT_EXECUTABLE | GDT_CODE_READABLE
#define GDT_DEFAULT_USER_DATA	GDT_GRANILARITY_PAGE | GDT_SIZE_32 | \
				GDT_PRESENT | GDT_RING3 | GDT_TYPE_DATA | \
				GDT_DATA_WRITABLE

struct gdt_ptr {
	u16 len;
	u32 ptr;
} __attribute__((packed));

void gdt_flush(const struct gdt_ptr *ptr);

#endif /* GDT_H_ */